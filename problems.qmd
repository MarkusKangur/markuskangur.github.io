---
title: "Interesting Problems"
---

Here is a collection of interesting problems and observations in math, probability, and statistics I have either thought up myself or come across at some point.

## Romeo and Juliet

**Statement:** I saw this problem on an instagram post a while back (the comments section was littered with ludicrous answers!). Suppose Romeo and Juliet each arrive at a random time between 8am and 9am. They will each wait 15 minutes after arrival before leaving. What is the probability they will meet?

**Solution:** Since they arrive randomly over the course of an hour, let $A \sim Unif(0,1)$ and $B \sim Unif(0,1)$ be random variables for the arrival time of Romeo and Juliet respectively (0 is 8am). If their arrival times are within 15 minutes of each other, then they will meet. So we are interested in the distribution of $A - B$, and the quantity $P(|A-B| < 0.25)$, since 15 minutes is 0.25 hours.

Since $A$ and $B$ are independent, we have their joint CDF as $F(a,b) = F(a) \times F(b) = ab$ for $0 \leq a \leq 1$ and $0 \leq b \leq 1$. Over the same domain, their PDF is $f(a,b) = 1$. To find the CDF for $U = |A-B|$, we integrate over the region $R(x) = \{ 0 \leq a \leq 1, 0 \leq b \leq 1 : |a-b| \leq x\}$.

$$
F(u) = P(U \leq x) = \int_{R(x)}1dA
$$
The region $R(x)$ can be represented as:

```{r echo = F, message = F}
library(ggplot2)

x = 0.25
as = seq(0,1,0.01)
bs_top = x + as
bs_top[bs_top > 1] = 1
bs_bottom = -x + as
bs_bottom[bs_bottom < 0] = 0
data = data.frame(as, bs_top, bs_bottom)

plt = ggplot(data) + 
  geom_line(aes(x = as, y = bs_top)) + 
  geom_line(aes(x = as, y = bs_bottom)) + 
  geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) + 
  xlab("a") + ylab("b") + ggtitle("Region R(x)") + 
  geom_vline(aes(xintercept = 0), linetype = "dashed") + 
  geom_vline(aes(xintercept = 1), linetype = "dashed") + 
  theme(legend.position="none") + coord_fixed()
plt

```

Since we are just calculating the area of the shaded area, it is faster to compute the
area of the complement, the two triangles above and below. 

$$F(u) = 1 - 2(\frac{1}{2} \cdot (1-x)^2) = 1-(1-x)^2$$

Thus $F(0.25) = 1 - (1-0.25)^2 = 7/16$, indicating Romeo and Juliet have a $7/16 = 43.75\%$ chance of meeting, meaning it is more likely that they don't meet. We can verify this number using a simulation.

```{r}
# Run a simulation to verify the results
n_sim = 10000000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
```


Alternatively, the CDF of A-B (no absolute values) is given by $\frac{1}{2}(x+1)^2$ for $-1 \leq x \leq 0$ and by $1-\frac{1}{2}(x-1)^2$ for $0 \leq x \leq 1$. Taking derivatives gives the density function: $f(x) = x+1$ and $f(x) = 1-x$ for the two cases respectively (like a triangle).

```{r}
# What does the empirical density look like?
points = romeo - juliet 
plot(density(points))

# What if we assume they are normally distirubuted? Mean of 0.5 (on the half hour)
curve(dnorm(x, mean = 0.5, 0.5), from=-3, to=4)

# Tune the variance parameter so that 99% of the observations fall within [0,1]
curve(dnorm(x, mean = 0.5, 0.19), from=-0.5, to=1.5)

romeo = rnorm(n_sim, mean = 0.5, sd = 0.19)
juliet = rnorm(n_sim, mean = 0.5 ,sd = 0.19)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
```



**Extension:** People don't really arrive randomly in an interval. Typically, we set a time, and arrive with some variation around that time. Suppose Romeo and Juliet agree to meet at 8:30am. We model their arrival times as independent normal distributions with means at 8:30am, and variance sufficiently small such that $P(0 \leq A \leq 1) \geq 0.95$, ie they arrive within 30 minutes of the specificied time 95% of the time.

## Elevator Waiting Times

Inspired by a problem from (link). Going to visit my girlfriend, who lives in a building with 30 floors (I enter from P2). Why does it take forever? This is exactly the same as the birthday problem!

```{r}
num = 366
prod(seq(365 - (num-1), 365, 1)/365)

# Elevator problem
prob <- function(num){
  prod(seq(30 - (num-1), 30, 1)/30)
}
res = c()
for (num in seq(1, 31)) {
  res = c(res, round(prob(num) * 100, 2))
}
plot(res, type = "l", ylab = "Prob All Different Floors")
```

## The Statistician's Pigeonhole Principle

While in the above problem the pigeonhole principle guarantees a collision with 31 > 30 people in the elevator, the distribution above tells us that this is extremely unlikely to happen. 

Statisticians are always so interested in 95% confidence statements - in the above problem, about 95% of the time a collision will occur with only 13 people in the room (a 60% reduction). In exchange for a small amount of uncertainty, we can drastically lower the bound required.

**Theorem: The Statistician's Pigeonhole Principle**


What about $k$ collisions? Or $k$ people on the same floor?


