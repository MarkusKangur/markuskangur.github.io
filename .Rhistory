quarto publish gh-pages
install.packages("quarto")
library(quarto)
quarto publish gh-pages
Since $A$ and $B$ are independent, we have their joint CDF as $F(a,b) = F(a) \times F(b) = ab$ for $0 \leq a \leq 1$ and $0 \leq b \leq 1$. Over the same domain, their PDF is $f(a,b) = 1$. To find the CDF for $U = |A-B|$, we integrate over the region $R(x) = \{ 0 \leq a \leq 1, 0 \leq b \leq 1 : |a-b| \leq x\}$.
xs = seq(0,1,0.2)
bs_bottom = x - as
x = 0.25
as = seq(0,1,0.2)
bs_top = x + as
bs_bottom = x - as
data = data.frame(as, bs_top, bs_bottom)
library(ggplot2)
x = 0.25
as = seq(0,1,0.2)
bs_top = x + as
bs_bottom = x - as
data = data.frame(as, bs_top, bs_bottom)
#Drawing plot
ggplot(cb,aes(x=Year,y=Anomaly10y)) +
geom_ribbon(aes(ymin = min, ymax = max, fill = valence), alpha = 0.75) +
scale_fill_manual(values = c("blue", "orange")) +
geom_line(aes(col = valence), size = 1) +
scale_color_manual(values = c("blue", "orange")) +
geom_hline(yintercept=0.3, col = "blue") +
theme_bw()
ggplot(data) +
geom_line(aes(x = as, y = bs_top))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom))
library(ggplot2)
x = 0.25
as = seq(0,1,0.2)
bs_top = x + as
bs_bottom = -x + as
data = data.frame(as, bs_top, bs_bottom)
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom))
#Drawing plot
ggplot(cb,aes(x=Year,y=Anomaly10y)) +
geom_ribbon(aes(ymin = min, ymax = max, fill = valence), alpha = 0.75) +
scale_fill_manual(values = c("blue", "orange")) +
geom_line(aes(col = valence), size = 1) +
scale_color_manual(values = c("blue", "orange")) +
geom_hline(yintercept=0.3, col = "blue") +
theme_bw()
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
xlim(c(0,1)) + ylim(c(0,1))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(ymin = bs_bottom, ymax = bs_top))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = red))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red"))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)")
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(0)
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(x = 0))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0, lty - 2))
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0)) +
geom_vline(aes(xintercept = 1))
bs_bottom[bs_bottom < 1] = 0
library(ggplot2)
x = 0.25
as = seq(0,1,0.2)
bs_top = x + as
bs_top[bs_top > 1] = 1
bs_bottom = -x + as
bs_bottom[bs_bottom < 1] = 0
data = data.frame(as, bs_top, bs_bottom)
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0)) +
geom_vline(aes(xintercept = 1))
library(ggplot2)
x = 0.25
as = seq(0,1,0.2)
bs_top = x + as
bs_top[bs_top > 1] = 1
bs_bottom = -x + as
bs_bottom[bs_bottom < 0] = 0
data = data.frame(as, bs_top, bs_bottom)
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0)) +
geom_vline(aes(xintercept = 1))
library(ggplot2)
x = 0.25
as = seq(0,1,0.02)
bs_top = x + as
bs_top[bs_top > 1] = 1
bs_bottom = -x + as
bs_bottom[bs_bottom < 0] = 0
data = data.frame(as, bs_top, bs_bottom)
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0)) +
geom_vline(aes(xintercept = 1))
library(ggplot2)
x = 0.25
as = seq(0,1,0.01)
bs_top = x + as
bs_top[bs_top > 1] = 1
bs_bottom = -x + as
bs_bottom[bs_bottom < 0] = 0
data = data.frame(as, bs_top, bs_bottom)
ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0)) +
geom_vline(aes(xintercept = 1))
library(ggplotly)
library(plotly)
plt = ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0)) +
geom_vline(aes(xintercept = 1))
ggplotly(plt)
library(ggplot2)
library(plotly)
x = 0.1
as = seq(0,1,0.01)
bs_top = x + as
bs_top[bs_top > 1] = 1
bs_bottom = -x + as
bs_bottom[bs_bottom < 0] = 0
data = data.frame(as, bs_top, bs_bottom)
plt = ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0)) +
geom_vline(aes(xintercept = 1))
ggplotly(plt)
library(ggplot2)
library(plotly)
x = 0.1
as = seq(0,1,0.01)
bs_top = x + as
bs_top[bs_top > 1] = 1
bs_bottom = -x + as
bs_bottom[bs_bottom < 0] = 0
data = data.frame(as, bs_top, bs_bottom)
plt = ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0)) +
geom_vline(aes(xintercept = 1))
plt
plt = ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
geom_vline(aes(xintercept = 1))
plt
plt = ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
geom_vline(aes(xintercept = 1))
plt
plt = ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
geom_vline(aes(xintercept = 1), linetype = "dashed")
plt
```{r echo = F}
library(ggplot2)
library(plotly)
x = 0.1
as = seq(0,1,0.01)
bs_top = x + as
bs_top[bs_top > 1] = 1
bs_bottom = -x + as
bs_bottom[bs_bottom < 0] = 0
data = data.frame(as, bs_top, bs_bottom)
plt = ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
geom_vline(aes(xintercept = 1), linetype = "dashed")
plt
27 * 26 * 25
17550 / 30^3
factorial(365)/(factorial(365-23) * 365^23)
factorial(365)
top = seq(365 - 23, 365, 1)
prod(top)
top/365
prod(top/365)
num = 22
prod(seq(365 - num, 365, 1))
num = 22
prod(seq(365 - num, 365, 1)/365)
num = 1
prod(seq(365 - num, 365, 1)/365)
num = 1
prod(seq(365 - (num-1), 365, 1)/365)
num = 22
prod(seq(365 - (num-1), 365, 1)/365)
num = 23
prod(seq(365 - (num-1), 365, 1)/365)
num = 1
prod(seq(365 - (num-1), 365, 1)/365)
num = 2
prod(seq(365 - (num-1), 365, 1)/365)
num = 10
prod(seq(365 - (num-1), 365, 1)/365)
num = 23
prod(seq(365 - (num-1), 365, 1)/365)
num = 24
prod(seq(365 - (num-1), 365, 1)/365)
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
num = 1
prod(seq(30 - (num-1), 30, 1)/30)
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
num = 30
prod(seq(30 - (num-1), 30, 1)/30)
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
num = 31
prod(seq(30 - (num-1), 30, 1)/30)
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
num = 4
prod(seq(30 - (num-1), 30, 1)/30)
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
num = 5
prod(seq(30 - (num-1), 30, 1)/30)
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
num = 7
prod(seq(30 - (num-1), 30, 1)/30)
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
num = 6
prod(seq(30 - (num-1), 30, 1)/30)
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
num = 10
prod(seq(30 - (num-1), 30, 1)/30)
prob <- function(num){
prod(seq(30 - (num-1), 30, 1)/30)
}
prob(num)
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
prob <- function(num){
prod(seq(30 - (num-1), 30, 1)/30)
}
for (num in seq(1, 31)) {
prob(num)
}
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
prob <- function(num){
prod(seq(30 - (num-1), 30, 1)/30)
}
for (num in seq(1, 31)) {
print(prob(num))
}
print(round(prob(num) * 100, 2))
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
prob <- function(num){
prod(seq(30 - (num-1), 30, 1)/30)
}
for (num in seq(1, 31)) {
print(round(prob(num) * 100, 2))
}
prob(seq(1,31))
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
prob <- function(num){
prod(seq(30 - (num-1), 30, 1)/30)
}
res = c()
for (num in seq(1, 31)) {
res = c(res, round(prob(num) * 100, 2))
}
res
plot(res)
plot(res, type = "l")
plot(res, type = "l", ylab = "Prob All Different Floors")
res
31-13
18/30
7/16
0.4375 * 16
# Run a simulation to verify the results
n_sim = 100000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
# Run a simulation to verify the results
n_sim = 100000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
# Run a simulation to verify the results
n_sim = 1000000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
# Run a simulation to verify the results
n_sim = 1000000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
# Run a simulation to verify the results
n_sim = 1000000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
# Run a simulation to verify the results
n_sim = 1000000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
# Run a simulation to verify the results
n_sim = 10000000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
# Run a simulation to verify the results
n_sim = 10000000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
# Run a simulation to verify the results
n_sim = 10000000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
# Run a simulation to verify the results
n_sim = 10000000
romeo = runif(n_sim)
juliet = runif(n_sim)
meet = sum(abs(romeo - juliet) <= 0.25)
cat("Percentage: ", round(meet * 100 / n_sim, 2), "%", "\n")
library(ggplot2)
library(plotly)
x = 0.1
as = seq(0,1,0.01)
bs_top = x + as
bs_top[bs_top > 1] = 1
bs_bottom = -x + as
bs_bottom[bs_bottom < 0] = 0
data = data.frame(as, bs_top, bs_bottom)
plt = ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
geom_vline(aes(xintercept = 1), linetype = "dashed") +
theme(legend.position="none")
plt
library(ggplot2)
x = 0.25
as = seq(0,1,0.01)
bs_top = x + as
bs_top[bs_top > 1] = 1
bs_bottom = -x + as
bs_bottom[bs_bottom < 0] = 0
data = data.frame(as, bs_top, bs_bottom)
plt = ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
geom_vline(aes(xintercept = 1), linetype = "dashed") +
theme(legend.position="none")
plt
plt = ggplot(data) +
geom_line(aes(x = as, y = bs_top)) +
geom_line(aes(x = as, y = bs_bottom)) +
geom_ribbon(aes(x = as, ymin = bs_bottom, ymax = bs_top, fill = "red", alpha = 0.5)) +
xlab("a") + ylab("b") + ggtitle("Region R(x)") +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
geom_vline(aes(xintercept = 1), linetype = "dashed") +
theme(legend.position="none") + coord_fixed()
plt
num = 366
prod(seq(365 - (num-1), 365, 1)/365)
# Elevator problem
prob <- function(num){
prod(seq(30 - (num-1), 30, 1)/30)
}
res = c()
for (num in seq(1, 31)) {
res = c(res, round(prob(num) * 100, 2))
}
plot(res, type = "l", ylab = "Prob All Different Floors")
